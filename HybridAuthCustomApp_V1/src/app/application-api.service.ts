/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IApplicationApiService {
    /**
     * @return Success
     */
    getAppUserAll(): Observable<AppUser[]>;
    /**
     * @return Success
     */
    getAppUser(id: number): Observable<AppUser>;
    /**
     * @param ids (optional) 
     * @return Success
     */
    getAppUsers(ids: number[] | null | undefined, id: string): Observable<AppUser[]>;
    /**
     * @return Success
     */
    getAppUserByNetworkId(networkId: string): Observable<AppUser>;
    /**
     * @param appUser (optional) 
     * @return Success
     */
    putAppUser(id: number, appUser: AppUser | null | undefined): Observable<void>;
    /**
     * @param appUser (optional) 
     * @return Success
     */
    postAppUser(appUser: AppUser | null | undefined): Observable<AppUser>;
    /**
     * @param appUser (optional) 
     * @return Success
     */
    postSelfUpdate(appUser: AppUser | null | undefined): Observable<AppUser>;
    /**
     * @return Success
     */
    deleteAppUser(id: number): Observable<AppUser>;
    /**
     * @return Success
     */
    updateAppUserLastLoginDate(id: number): Observable<void>;
    /**
     * @return Success
     */
    getEnvironment(): Observable<string>;
    /**
     * @return Success
     */
    getUserRoleAll(): Observable<UserRole[]>;
    /**
     * @return Success
     */
    getUserRole(id: number): Observable<UserRole>;
    /**
     * @param roleName (optional) 
     * @return Success
     */
    getUserRoleByName(roleName: string | null | undefined, networkId: string): Observable<UserRole>;
    /**
     * @param userRole (optional) 
     * @return Success
     */
    putUserRole(id: number, userRole: UserRole | null | undefined): Observable<void>;
    /**
     * @param userRole (optional) 
     * @return Success
     */
    postUserRole(userRole: UserRole | null | undefined): Observable<UserRole>;
    /**
     * @return Success
     */
    deleteUserRole(id: number): Observable<UserRole>;
}

@Injectable({
    providedIn: 'root'
})
export class ApplicationApiService implements IApplicationApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://";
    }

    /**
     * @return Success
     */
    getAppUserAll(): Observable<AppUser[]> {
        let url_ = this.baseUrl + "/api/v1/AppUser/GetAppUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppUserAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppUserAll(<any>response_);
                } catch (e) {
                    return <Observable<AppUser[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppUser[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppUserAll(response: HttpResponseBase): Observable<AppUser[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AppUser.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppUser[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAppUser(id: number): Observable<AppUser> {
        let url_ = this.baseUrl + "/api/v1/AppUser/GetAppUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppUser(<any>response_);
                } catch (e) {
                    return <Observable<AppUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppUser>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppUser(response: HttpResponseBase): Observable<AppUser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppUser.fromJS(resultData200) : new AppUser();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppUser>(<any>null);
    }

    /**
     * @param ids (optional) 
     * @return Success
     */
    getAppUsers(ids: number[] | null | undefined, id: string): Observable<AppUser[]> {
        let url_ = this.baseUrl + "/api/v1/AppUser/GetAppUsers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppUsers(<any>response_);
                } catch (e) {
                    return <Observable<AppUser[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppUser[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppUsers(response: HttpResponseBase): Observable<AppUser[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AppUser.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppUser[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAppUserByNetworkId(networkId: string): Observable<AppUser> {
        let url_ = this.baseUrl + "/api/v1/AppUser/GetAppUserByNetworkId/{networkId}";
        if (networkId === undefined || networkId === null)
            throw new Error("The parameter 'networkId' must be defined.");
        url_ = url_.replace("{networkId}", encodeURIComponent("" + networkId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppUserByNetworkId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppUserByNetworkId(<any>response_);
                } catch (e) {
                    return <Observable<AppUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppUser>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppUserByNetworkId(response: HttpResponseBase): Observable<AppUser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppUser.fromJS(resultData200) : new AppUser();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppUser>(<any>null);
    }

    /**
     * @param appUser (optional) 
     * @return Success
     */
    putAppUser(id: number, appUser: AppUser | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/AppUser/PutAppUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(appUser);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutAppUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutAppUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPutAppUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param appUser (optional) 
     * @return Success
     */
    postAppUser(appUser: AppUser | null | undefined): Observable<AppUser> {
        let url_ = this.baseUrl + "/api/v1/AppUser/PostAppUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(appUser);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostAppUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostAppUser(<any>response_);
                } catch (e) {
                    return <Observable<AppUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppUser>><any>_observableThrow(response_);
        }));
    }

    protected processPostAppUser(response: HttpResponseBase): Observable<AppUser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppUser.fromJS(resultData200) : new AppUser();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppUser>(<any>null);
    }

    /**
     * @param appUser (optional) 
     * @return Success
     */
    postSelfUpdate(appUser: AppUser | null | undefined): Observable<AppUser> {
        let url_ = this.baseUrl + "/api/v1/AppUser/PostSelfUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(appUser);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostSelfUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostSelfUpdate(<any>response_);
                } catch (e) {
                    return <Observable<AppUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppUser>><any>_observableThrow(response_);
        }));
    }

    protected processPostSelfUpdate(response: HttpResponseBase): Observable<AppUser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppUser.fromJS(resultData200) : new AppUser();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppUser>(<any>null);
    }

    /**
     * @return Success
     */
    deleteAppUser(id: number): Observable<AppUser> {
        let url_ = this.baseUrl + "/api/v1/AppUser/DeleteAppUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAppUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAppUser(<any>response_);
                } catch (e) {
                    return <Observable<AppUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppUser>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAppUser(response: HttpResponseBase): Observable<AppUser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppUser.fromJS(resultData200) : new AppUser();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppUser>(<any>null);
    }

    /**
     * @return Success
     */
    updateAppUserLastLoginDate(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/AppUser/UpdateAppUserLastLoginDate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAppUserLastLoginDate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAppUserLastLoginDate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAppUserLastLoginDate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEnvironment(): Observable<string> {
        let url_ = this.baseUrl + "/api/v1/Diagnostic/GetEnvironment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEnvironment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEnvironment(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetEnvironment(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData400) {
                result400 = {} as any;
                for (let key in resultData400) {
                    if (resultData400.hasOwnProperty(key))
                        result400![key] = resultData400[key];
                }
            }
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData404) {
                result404 = {} as any;
                for (let key in resultData404) {
                    if (resultData404.hasOwnProperty(key))
                        result404![key] = resultData404[key];
                }
            }
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @return Success
     */
    getUserRoleAll(): Observable<UserRole[]> {
        let url_ = this.baseUrl + "/api/v1/UserRole/GetUserRole";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserRoleAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserRoleAll(<any>response_);
                } catch (e) {
                    return <Observable<UserRole[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRole[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserRoleAll(response: HttpResponseBase): Observable<UserRole[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserRole.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRole[]>(<any>null);
    }

    /**
     * @return Success
     */
    getUserRole(id: number): Observable<UserRole> {
        let url_ = this.baseUrl + "/api/v1/UserRole/GetUserRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserRole(<any>response_);
                } catch (e) {
                    return <Observable<UserRole>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRole>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserRole(response: HttpResponseBase): Observable<UserRole> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserRole.fromJS(resultData200) : new UserRole();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRole>(<any>null);
    }

    /**
     * @param roleName (optional) 
     * @return Success
     */
    getUserRoleByName(roleName: string | null | undefined, networkId: string): Observable<UserRole> {
        let url_ = this.baseUrl + "/api/v1/UserRole/GetUserRoleByName/{networkId}?";
        if (networkId === undefined || networkId === null)
            throw new Error("The parameter 'networkId' must be defined.");
        url_ = url_.replace("{networkId}", encodeURIComponent("" + networkId)); 
        if (roleName !== undefined)
            url_ += "roleName=" + encodeURIComponent("" + roleName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserRoleByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserRoleByName(<any>response_);
                } catch (e) {
                    return <Observable<UserRole>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRole>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserRoleByName(response: HttpResponseBase): Observable<UserRole> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserRole.fromJS(resultData200) : new UserRole();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRole>(<any>null);
    }

    /**
     * @param userRole (optional) 
     * @return Success
     */
    putUserRole(id: number, userRole: UserRole | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/UserRole/PutUserRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userRole);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutUserRole(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPutUserRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param userRole (optional) 
     * @return Success
     */
    postUserRole(userRole: UserRole | null | undefined): Observable<UserRole> {
        let url_ = this.baseUrl + "/api/v1/UserRole/PostUserRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userRole);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostUserRole(<any>response_);
                } catch (e) {
                    return <Observable<UserRole>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRole>><any>_observableThrow(response_);
        }));
    }

    protected processPostUserRole(response: HttpResponseBase): Observable<UserRole> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserRole.fromJS(resultData200) : new UserRole();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRole>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUserRole(id: number): Observable<UserRole> {
        let url_ = this.baseUrl + "/api/v1/UserRole/DeleteUserRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserRole(<any>response_);
                } catch (e) {
                    return <Observable<UserRole>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserRole>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUserRole(response: HttpResponseBase): Observable<UserRole> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserRole.fromJS(resultData200) : new UserRole();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserRole>(<any>null);
    }
}

export class AppUser {
    id?: number | null;
    networkId?: string | null;
    displayName?: string | null;
    companyName?: string | null;
    userRoleId?: number | null;
    isActive?: boolean | null;
    createdBy?: number | null;
    createdOn?: Date | null;
    lastModifiedDate?: Date | null;
    lastModifiedBy?: number | null;
    lastLoggedInDate?: Date | null;
    userRole?: UserRole | null;

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.networkId = data["networkId"] !== undefined ? data["networkId"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.userRoleId = data["userRoleId"] !== undefined ? data["userRoleId"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : <any>null;
            this.createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>null;
            this.lastModifiedDate = data["lastModifiedDate"] ? new Date(data["lastModifiedDate"].toString()) : <any>null;
            this.lastModifiedBy = data["lastModifiedBy"] !== undefined ? data["lastModifiedBy"] : <any>null;
            this.lastLoggedInDate = data["lastLoggedInDate"] ? new Date(data["lastLoggedInDate"].toString()) : <any>null;
            this.userRole = data["userRole"] ? UserRole.fromJS(data["userRole"]) : <any>null;
        }
    }

    static fromJS(data: any): AppUser {
        data = typeof data === 'object' ? data : {};
        let result = new AppUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["networkId"] = this.networkId !== undefined ? this.networkId : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["userRoleId"] = this.userRoleId !== undefined ? this.userRoleId : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : <any>null;
        data["lastModifiedBy"] = this.lastModifiedBy !== undefined ? this.lastModifiedBy : <any>null;
        data["lastLoggedInDate"] = this.lastLoggedInDate ? this.lastLoggedInDate.toISOString() : <any>null;
        data["userRole"] = this.userRole ? this.userRole.toJSON() : <any>null;
        return data; 
    }
}

export class UserRole {
    id?: number | null;
    roleName?: string | null;
    isActive?: boolean | null;
    createdBy?: number | null;
    createdOn?: Date | null;
    lastModifiedDate?: Date | null;
    lastModifiedBy?: number | null;
    appUser?: AppUser[] | null;

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : <any>null;
            this.createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>null;
            this.lastModifiedDate = data["lastModifiedDate"] ? new Date(data["lastModifiedDate"].toString()) : <any>null;
            this.lastModifiedBy = data["lastModifiedBy"] !== undefined ? data["lastModifiedBy"] : <any>null;
            if (data["appUser"] && data["appUser"].constructor === Array) {
                this.appUser = [] as any;
                for (let item of data["appUser"])
                    this.appUser!.push(AppUser.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : <any>null;
        data["lastModifiedBy"] = this.lastModifiedBy !== undefined ? this.lastModifiedBy : <any>null;
        if (this.appUser && this.appUser.constructor === Array) {
            data["appUser"] = [];
            for (let item of this.appUser)
                data["appUser"].push(item.toJSON());
        }
        return data; 
    }
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}